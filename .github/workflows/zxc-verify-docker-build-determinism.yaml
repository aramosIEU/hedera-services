##
# Copyright (C) 2023-2024 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

name: "ZXC: Verify Docker Build Determinism"
on:
  workflow_call:
    inputs:
      ref:
        description: "The branch, tag, or commit to checkout:"
        type: string
        required: false
        default: ""
      java-distribution:
        description: "Java JDK Distribution:"
        type: string
        required: false
        default: "temurin"
      java-version:
        description: "Java JDK Version:"
        type: string
        required: false
        default: "21.0.1"

    secrets:
      gradle-cache-username:
        description: "The username used to authenticate with the Gradle Build Cache Node."
        required: true
      gradle-cache-password:
        description: "The password used to authenticate with the Gradle Build Cache Node."
        required: true

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  contents: read

env:
  GRADLE_CACHE_USERNAME: ${{ secrets.gradle-cache-username }}
  GRADLE_CACHE_PASSWORD: ${{ secrets.gradle-cache-password }}
  DOCKER_MANIFEST_GENERATOR: .github/workflows/support/scripts/generate-docker-artifact-baseline.sh
  DOCKER_MANIFEST_PATH: ${{ github.workspace }}/.manifests/docker
  DOCKER_REGISTRY: localhost:5000
  DOCKER_IMAGE_NAME: main-network-node
  DOCKER_CONTEXT_PATH: hedera-node/infrastructure/docker/containers/production-next/main-network-node

jobs:
  generate-baseline:
    name: Generate Baseline
    runs-on: [self-hosted, Linux, medium, ephemeral]
    outputs:
      sha: ${{ steps.commit.outputs.sha }}
      sha-abbrev: ${{ steps.commit.outputs.sha-abbrev }}
      source-date: ${{ steps.commit.outputs.source-date }}
      path: ${{ steps.baseline.outputs.path }}
      file: ${{ steps.baseline.outputs.file }}
      name: ${{ steps.baseline.outputs.name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}

      - name: Setup Java
        uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0 # v3.13.0
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@842c587ad8aa4c68eeba24c396e15af4c2e9f30a # v2.9.0
        with:
          cache-disabled: true

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@f105ef0cdb3b102a020be1767fcc8a974898b7c6 # v1.2.0
        with:
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "swirlds-automation@hedera-registry.iam.gserviceaccount.com"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@e30db14379863a8c79331b04a9969f4c1e225e0b # v1.1.1

      - name: Retrieve Commit Hash
        id: commit
        run: |
          echo "sha=$(git rev-parse HEAD)" >> "${GITHUB_OUTPUT}"
          echo "sha-abbrev=$(git rev-parse HEAD | tr -d '[:space:]' | cut -c1-8)" >> "${GITHUB_OUTPUT}"
          echo "source-date=$(git log -1 --pretty=%ct)" >> "${GITHUB_OUTPUT}"

      - name: Baseline Existence Check
        id: baseline
        run: |
          BASELINE_NAME="${{ steps.commit.outputs.sha }}.tar.gz"
          BASELINE_PATH="gs://hedera-ci-ephemeral-artifacts/${{ github.repository }}/docker/baselines"
          BASELINE_FILE="${BASELINE_PATH}/${BASELINE_NAME}"
          BASELINE_EXISTS="false"

          if gsutil ls "${BASELINE_FILE}" >/dev/null 2>&1; then
             BASELINE_EXISTS="true"
          fi

          echo "exists=${BASELINE_EXISTS}" >> "${GITHUB_OUTPUT}"
          echo "path=${BASELINE_PATH}" >> "${GITHUB_OUTPUT}"
          echo "name=${BASELINE_NAME}" >> "${GITHUB_OUTPUT}"
          echo "file=${BASELINE_FILE}" >> "${GITHUB_OUTPUT}"

      - name: Install Skopeo and JQ
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        run: |
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends skopeo jq

      - name: Build Gradle Artifacts
        id: gradle-build
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        run: ./gradlew assemble --scan

      - name: Setup QEmu Support
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}

      - name: Setup Docker Buildx Support
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        with:
          version: v0.12.0
          driver-opts: network=host

      - name: Setup Local Docker Registry
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        run: docker run -d -p 5000:5000 --restart=always --name registry registry:latest

      - name: Show Docker Version
        run: docker version

      - name: Show Docker Info
        run: docker info

      - name: Prepare for Docker Build
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        run: |
          mkdir -p "${{ github.workspace }}/${{ env.DOCKER_CONTEXT_PATH }}/sdk/data"

          echo "::group::Copying Library Artifacts"
            cp -Rvf "${{ github.workspace }}/hedera-node/data/lib" "${{ github.workspace }}/${{ env.DOCKER_CONTEXT_PATH }}/sdk/data/"
          echo "::endgroup::"

          echo "::group::Copying Application Artifacts"
            cp -Rvf "${{ github.workspace }}/hedera-node/data/apps" "${{ github.workspace }}/${{ env.DOCKER_CONTEXT_PATH }}/sdk/data/"
          echo "::endgroup::"

      - name: Build Docker Image
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        env:
          SOURCE_DATE_EPOCH: ${{ steps.commit.outputs.source-date }}
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        with:
          push: true
          no-cache: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            SOURCE_DATE_EPOCH=${{ steps.commit.outputs.source-date }}
          context: ${{ env.DOCKER_CONTEXT_PATH }}
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.commit.outputs.sha-abbrev }}

      - name: Generate Manifest
        id: manifest
        env:
          MANIFEST_PATH: ${{ env.DOCKER_MANIFEST_PATH }}
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        run: ${{ env.DOCKER_MANIFEST_GENERATOR }}

      - name: Amend Manifest with Gradle Artifacts
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        working-directory: ${{ env.DOCKER_MANIFEST_PATH }}
        run: |
          EXTRACTED_FILE_NAME="${{ steps.commit.outputs.sha }}.tar"
          gunzip "${{ steps.manifest.outputs.name }}"
          tar -rvf "${EXTRACTED_FILE_NAME}" -C "${{ github.workspace }}/${{ env.DOCKER_CONTEXT_PATH }}" sdk
          gzip "${EXTRACTED_FILE_NAME}"

      - name: Upload Baseline
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        run: gsutil cp "${{ steps.manifest.outputs.file }}" "${{ steps.baseline.outputs.file }}"

  verify-artifacts:
    name: "Verify Artifacts (${{ join(matrix.os, ', ') }})"
    runs-on: ${{ matrix.os }}
    needs:
      - generate-baseline
    strategy:
      fail-fast: false
      matrix:
        # Windows is disabled due to GitHub not supporting Docker Desktop/Podman Desktop and Docker CE on Windows not
        # supporting BuildKit and the Buildx plugin.
        # The GitHub hosted ubuntu-22.04 runners are disabled temporarily due to the Azure VM causing docker container
        # builds to be non-deterministic. Self-hosted runners using Ubuntu 22.04 are unaffected.
        # The Self Hosted Large instance is temporarily disabled because it is running no longer supported version of
        # Ubuntu 18.04. The Large instance will be upgraded to Ubuntu 22.04 in the near future.
        # Disabled macos-11 runner to minimize the number of concurrent macOS builds due to concurrency issues.
        os:
          #- ubuntu-22.04
          - ubuntu-20.04
          - macos-12
          #- macos-11
          #- windows-2022
          #- windows-2019
          - [self-hosted, Linux, medium, ephemeral]
          #- [self-hosted, Linux, large, ephemeral]
    steps:
      - name: Standardize Git Line Endings
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout Code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}

      - name: Setup Python
        uses: actions/setup-python@b64ffcaf5b410884ad320a9cfac8866006a109aa # v4.8.0
        with:
          python-version: 3.9

      - name: Install Skopeo and JQ (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends skopeo jq

      - name: Install Skopeo and JQ (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: brew install skopeo jq

      - name: Install Skopeo and JQ (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          curl -L -o /usr/bin/jq.exe https://github.com/stedolan/jq/releases/latest/download/jq-win64.exe
          curl -L -o /usr/bin/skopeo.exe https://github.com/passcod/winskopeo/releases/latest/download/skopeo.exe

      - name: Setup CoreUtils (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: brew install coreutils

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@f105ef0cdb3b102a020be1767fcc8a974898b7c6 # v1.2.0
        with:
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "swirlds-automation@hedera-registry.iam.gserviceaccount.com"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@e30db14379863a8c79331b04a9969f4c1e225e0b # v1.1.1
        env:
          CLOUDSDK_PYTHON: ${{ format('{0}{1}', env.pythonLocation, runner.os == 'Windows' && '\python.exe' || '/bin/python3') }}

      - name: Download Baseline
        env:
          CLOUDSDK_PYTHON: ${{ format('{0}{1}', env.pythonLocation, runner.os == 'Windows' && '\python.exe' || '/bin/python3') }}
        run: |
          mkdir -p "${DOCKER_MANIFEST_PATH}"
          cd "${DOCKER_MANIFEST_PATH}"
          gsutil cp "${{ needs.generate-baseline.outputs.file }}" .
          tar -xzf "${{ needs.generate-baseline.outputs.name }}"
          mv "sdk" "${{ github.workspace }}/${{ env.DOCKER_CONTEXT_PATH }}/"

      - name: Set up Docker
        uses: crazy-max/ghaction-setup-docker@d9be6cade441568ba10037bce5221b8f564981f1 # v3.0.0
        if: ${{ !contains(matrix.os, 'self-hosted') }}
        with:
          version: v24.0.7

      - name: Setup QEmu Support
        if: ${{ runner.os != 'Windows' }}
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0

      - name: Setup Docker Buildx Support
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
        if: ${{ runner.os != 'Windows' }}
        with:
          version: v0.12.0
          driver-opts: network=host

      - name: Setup Local Docker Registry
        run: docker run -d -p 5000:5000 --restart=always --name registry registry:latest

      - name: Show Docker Version
        run: docker version

      - name: Show Docker Info
        run: docker info

      - name: Build Docker Image
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        env:
          SOURCE_DATE_EPOCH: ${{ needs.generate-baseline.outputs.source-date }}
        with:
          push: true
          no-cache: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            SOURCE_DATE_EPOCH=${{ needs.generate-baseline.outputs.source-date }}
          context: ${{ env.DOCKER_CONTEXT_PATH }}
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.generate-baseline.outputs.sha-abbrev }}

      - name: Regenerate Manifest
        id: regen-manifest
        env:
          MANIFEST_PATH: ${{ env.DOCKER_MANIFEST_PATH }}/regenerated
        run: ${{ env.DOCKER_MANIFEST_GENERATOR }}

      - name: Validate Layers (linux/amd64)
        run: |
          if ! diff -u "${DOCKER_MANIFEST_PATH}/linux-amd64.layers.json" "${{ steps.regen-manifest.outputs.path }}/linux-amd64.layers.json" >/dev/null 2>&1; then
           echo "::group::Layer Differences"
           diff -u "${DOCKER_MANIFEST_PATH}/linux-amd64.layers.json" "${{ steps.regen-manifest.outputs.path }}/linux-amd64.layers.json"
           echo "::endgroup::"
           exit 1
          fi

      - name: Validate Layers (linux/arm64)
        run: |
          if ! diff -u "${DOCKER_MANIFEST_PATH}/linux-arm64.layers.json" "${{ steps.regen-manifest.outputs.path }}/linux-arm64.layers.json" >/dev/null 2>&1; then
           echo "::group::Layer Differences"
           diff -u "${DOCKER_MANIFEST_PATH}/linux-arm64.layers.json" "${{ steps.regen-manifest.outputs.path }}/linux-arm64.layers.json"
           echo "::endgroup::"
           exit 1
          fi

      - name: Validate Full Manifest (linux/amd64)
        run: |
          if ! diff -u "${DOCKER_MANIFEST_PATH}/linux-amd64.comparable.json" "${{ steps.regen-manifest.outputs.path }}/linux-amd64.comparable.json" >/dev/null 2>&1; then
           echo "::group::Layer Differences"
           diff -u "${DOCKER_MANIFEST_PATH}/linux-amd64.comparable.json" "${{ steps.regen-manifest.outputs.path }}/linux-amd64.comparable.json"
           echo "::endgroup::"
           exit 1
          fi

      - name: Validate Full Manifest (linux/arm64)
        run: |
          if ! diff -u "${DOCKER_MANIFEST_PATH}/linux-arm64.comparable.json" "${{ steps.regen-manifest.outputs.path }}/linux-arm64.comparable.json" >/dev/null 2>&1; then
           echo "::group::Layer Differences"
           diff -u "${DOCKER_MANIFEST_PATH}/linux-arm64.comparable.json" "${{ steps.regen-manifest.outputs.path }}/linux-arm64.comparable.json"
           echo "::endgroup::"
           exit 1
          fi

      - name: Publish Manifests
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        if: ${{ steps.regen-manifest.conclusion == 'success' && failure() && !cancelled() }}
        with:
          name: Docker Manifests [${{ join(matrix.os, ', ') }}]
          path: ${{ env.DOCKER_MANIFEST_PATH }}/**
